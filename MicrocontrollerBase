/*
 * 
 * Author: Kevin Juneau
 * 
 * Base Station FSK
 * Code to send and receive FSK data to downhole tool
 * 
 */

// todo:
// test uC communication  
    // get one uC to talk to itself
    // get two uCs to talk to each other
    // communicate from GUI to LED using two uCs
// add additional FIR filters for second set of frequencies
// write code in MessageRoutine() to handle messages for each end of communication

#include "mcc_generated_files/mcc.h"
#pragma warning disable 520     // warning: (520) function "xyz" is never called  3
#pragma warning disable 1498    // fputc.c:16:: warning: (1498) pointer (unknown)

//*************************
// TUNING defines
//*************************

#define TUNE_LowFreq 4.48
#define TUNE_HighFreq 4.45

#define TUNE_SamplingRate 0xe8f0
#define TUNE_BitRate 0x0000

//*************************

#define FREQUENCY 1000 // frequency for sending data

#define HI_THRESH 80
#define LO_THRESH 40

#define FILTER_SIZE 8 // size of moving average filter
#define BUFFER_SIZE 32 // size of buffer for frequency estimate
#define MESSAGE_SIZE 16 // number of bits in message

//*************************

// DDS variables
uint8_t amplitude = 5;
uint16_t phaseIncrement = 2000;
uint8_t sin[64] =  {128,140,153,165,177,188,199,209,
                    218,227,234,241,246,250,253,255,
                    255,255,253,250,246,241,234,227,
                    218,209,199,188,177,165,153,140,
                    128,115,103, 91, 79, 68, 56, 47,
                     37, 29, 22, 15, 10,  6,  2,  1,
                      0,  1,  2,  6, 10, 15, 22, 29,
                     37, 47, 56, 68, 79, 91,103,115};

// digital filters for bit determination
    // command to generate filters: a = fir1(BUFFER_SIZE-1,[0.15,0.2])
    //                              b = fir1(BUFFER_SIZE-1,[0.2,0.25])
float filterLo[32] = {-0.004751,-0.001043, 0.005029, 0.014240, 0.024126, 0.028692, 0.0210412,-0.002131,
                      -0.036743,-0.070904,-0.088970,-0.078654,-0.037824, 0.022735, 0.0825259, 0.119496,
                       0.119496, 0.082525, 0.022735,-0.037824,-0.078654,-0.088970,-0.0709049,-0.036743,
                      -0.002131, 0.021041, 0.028692, 0.024126, 0.014240, 0.005029,-0.0010432,-0.004751};
float filterHi[32] = {-0.000300,-0.006012,-0.011904,-0.014209,-0.006539, 0.013737, 0.0390218, 0.052144,
                       0.036663,-0.009156,-0.065645,-0.099861,-0.085633,-0.022685, 0.0592753, 0.116230,
                       0.116230, 0.059275,-0.022685,-0.085633,-0.099861,-0.065645,-0.0091569, 0.036663,
                       0.052144, 0.039021, 0.013737,-0.006539,-0.014209,-0.011904,-0.0060120,-0.000300};

//*************************
// SENDING VARIABLES
//*************************

// flags
bool M = false;
bool generateWave = false;

// variables
uint16_t messageOut = 0;
bool sendBit;
short sendCode;

// functions
void MainSendData(void);
uint16_t Convert(void);
void TMR1ISR(void);

//*************************
// RECEIVING VARIABLES
//*************************

// flags
bool R = false;
bool newSample = false;
bool receiveMessage = false;
bool bufferFull = false;
bool messageFull = false;

// variables
enum READ_STATE
{
    IDLE = 0,
    READ = 1,
    FILTER = 2,
    FILL_MESSAGE = 3
};
enum READ_STATE currentState = IDLE;
uint16_t messageIn = 0;
short receiveCode = 0;

// functions
void MainReceiveData(void);
int8_t Filter(uint8_t adcVal);
void TMR3ISR(void);
void MessageRoutine(void);

//*************************


void main(void) 
{
    //local variables
    char cmd;
    uint8_t i;

    EPWM1_Initialize();
    ADC_Initialize();
    SYSTEM_Initialize();
    
    TEST_PIN_SetLow();
    
    // Provide Baud rate generator time to stabilize before splash screen
    TMR0_WriteTimer(0x0000);
    INTCONbits.TMR0IF = 0;
    while (INTCONbits.TMR0IF == 0);

    TMR1_SetInterruptHandler(TMR1ISR);
    TMR3_SetInterruptHandler(TMR3ISR);
    
    INTERRUPT_GlobalInterruptEnable();    
    INTERRUPT_PeripheralInterruptEnable();

    for (;;) {
        
        MainSendData();
        MainReceiveData();
        
        if (EUSART1_DataReady) 
        { // wait for incoming data on USART
            cmd = EUSART1_Read();
            switch (cmd) 
            { // and do what it tells you to do
                case '?':
                    printf("-------------------------------------------------\r\n");
                    printf("?: help menu\r\n");
                    printf("o: k\r\n");
                    printf("Z: Reset processor\r\n");
                    printf("z: Clear the terminal\r\n");
                    printf("S/s: Start/stop fixed frequency sine wave\r\n");
                    printf("f: enter Frequency\r\n");
                    printf("A/a: increase/decrease Amplitude select amplitude\r\n");
                    printf("M: Enter binary message to send\r\n");
                    printf("R: Receive FSK message\r\n");
                    printf("-------------------------------------------------\r\n");
                    break;
                    
                case 'o':
                    printf("o:	ok\r\n");
                    break;
                   
                case 'Z':
                    for (i = 0; i < 40; i++) printf("\n");
                    RESET();
                    break;
                
                case 'z':
                    for (i = 0; i < 40; i++) printf("\n");
                    break;
                    
                case 'S':
                    generateWave = 1;
                    printf("Generating sine wave.\r\n");
                    break;
                    
                case 's':
                    generateWave = 0;
                    printf("Stopped generating sine wave.\r\n");
                    break;
                    
                case 'f':
                    printf("Enter the new frequency.\r\n");
                    phaseIncrement = 2*Convert();
                    break;
                    
                case 'A':
                    if (amplitude < 15) 
                    {
                        amplitude++;
                        printf("Amplitude is %d/16.\r\n",amplitude);
                    } 
                    else 
                    {
                        printf("Amplitude is already at its maximum.\r\n");
                        printf("Amplitude is %d/16.\r\n",amplitude);
                    }
                    break;
                    
                case 'a':
                    if (amplitude > 1) 
                    {
                        amplitude--;
                        printf("Amplitude is %d/16.\r\n",amplitude);
                    }
                    else 
                    {
                        printf("Amplitude is already at its minimum.\r\n");
                        printf("Amplitude is %d/16.\r\n",amplitude);
                    }
                    break;
                
                case 'M':
                    M = true;
                    break;

                
                case 'R':
                    R = !R;
                    break;
                    
                case 'T':
                    printf("Start test\r\n");
                    break;
                    
                case 't':
                    printf("End test\r\n");
                    generateWave = false;
                    break;
                    
                default:
                    printf("%c is an invalid input.",cmd);
                    break;
                
            }
        }
    }
}

// Gets message from USART, generates FSK wave
void MainSendData(void)
{
    static uint8_t messageIndex = 0;
    static bool getMessage = true;
    if (M)
    {
        if (getMessage)
        {
            printf("Enter send code\r\n");
            messageOut = Convert() << 12; // put sendCode at the first 4 bits
            printf("Enter message\r\n");
            messageOut = messageOut + Convert(); // add message as the last 12 bits
            getMessage = false;
            INTCONbits.TMR0IF = 0;
            TMR0_WriteTimer(0x0000);
        }
        
        if (messageIndex < 16 && INTCONbits.TMR0IF == 1)
        {
            sendBit = messageOut & 0x0001;
            messageOut = messageOut >> 1;
            if (sendBit) phaseIncrement = TUNE_HighFreq*(FREQUENCY + 0.075 * FREQUENCY);
            else phaseIncrement = TUNE_LowFreq*(FREQUENCY - 0.075 * FREQUENCY);
            generateWave = true;
            messageIndex++;
            
            INTCONbits.TMR0IF = 0;
            TMR0_WriteTimer(TUNE_BitRate);
        }
        else if (messageIndex >= 16)
        {
            generateWave = false;
            M = false;
            getMessage = true;
            messageIndex = 0;
        }
    }
    else
    {
        //generateWave = false;
    }
}

// Gets multi-digit number as input
uint16_t Convert(void) 
{
    printf("> ");
    uint16_t num = 0;
    char input = '0';
    do {
        num = num * 10;
        num = num + (input - '0');
        input = EUSART1_Read();
        printf("%c",input);
    } while (input != '\r');
    printf("\r\n");
    return num;
}

// DDS ISR
void TMR1ISR(void) 
{
    uint8_t local;
    uint8_t localDiv2, localDiv4, localDiv8, localDiv16;
    uint8_t total = 0;
    uint8_t index = 0;
    static uint16_t phaseAccumulator = 0;
    
    //generate wave
    if (generateWave) 
    {
        phaseAccumulator = phaseAccumulator + phaseIncrement;
        index = phaseAccumulator >> 10;
        local = sin[index];
        localDiv2  = local >> 1;
        localDiv4  = local >> 2;
        localDiv8  = local >> 3;
        localDiv16 = local >> 4;
        total = 0;
        if (amplitude&0b0001) total += localDiv16;
        if (amplitude&0b0010) total += localDiv8;
        if (amplitude&0b0100) total += localDiv4;
        if (amplitude&0b1000) total += localDiv2;
        EPWM1_LoadDutyValue(total<<2);
    } 
    else 
    {
        EPWM1_LoadDutyValue(0x00);
    }
}

// Receive FSK message and convert to integer
void MainReceiveData(void)
{
    // READ variables
    static uint8_t bufferIndex = 0;
    int8_t filterOutput = -1;
    
    // FILTER variables
    static bool oldBit = 0;
    static bool currentBit = 0;
    static uint8_t bitIndex[] = {0,0}; // counts how long bit has {stayed the same, been different}
    static uint8_t bitAverage = 0; // sum of last (FILTER_SIZE) bits
    
    // FILL_MESSAGE variables
    static uint8_t messageIndex = 0;
    
    if (R)
    {
        if (newSample)
        {
            newSample = false;
            switch (currentState)
            {
                case IDLE:
                    if (ADRESH > HI_THRESH || ADRESH < LO_THRESH)
                    {
                        currentState = READ;
                    }
                    break;
                    
                case FILL_MESSAGE:
                    // shift message and add new bit
                    messageIn = (messageIn << 1) + currentBit;
                    messageIndex++;
                    
                    currentState = READ;
                    
                    if (messageIndex == MESSAGE_SIZE) // full message has been read
                    {
                        messageIndex = 0;
                        
                        bitAverage = 0;
                        bitIndex[0] = 0;
                        bitIndex[1] = 0;
                        
                        bufferIndex = 0;
                        
                        receiveCode = (messageIn & 0xF000) >> 12;

                        messageIn = messageIn & 0x0FFF;
                        MessageRoutine();
                        
                        currentState = IDLE;
                    }
                    break;

                case FILTER:
                    // if Filter() outputs 0 and oldBit is 0, no change
                    // if Filter() outputs 1 and oldBit is 0, bitAverage increases
                    // if Filter() outputs 1 and oldBit is 1, no change
                    // if Filter() outputs 0 and oldBit is 1, bitAverage decreases
                    bitAverage += (filterOutput - oldBit);
                    
                    if (bitAverage > FILTER_SIZE) bitAverage = FILTER_SIZE;
                    if (bitAverage < 0) bitAverage = 0;
                    
                    currentBit = (bitAverage > FILTER_SIZE/2);
                    
                    // set oldBit for first bit input
                    if (bitIndex[0] == 0)
                    {
                        oldBit = currentBit;
                    }
                    
                    // count how long bit has stayed the same / been different
                    bitIndex[0]++;
                    if (currentBit == oldBit)
                    {
                        bitIndex[1] = 0;
                        if (bitIndex[0] > FILTER_SIZE) // it's been long enough, read bit
                        {
                            currentState = FILL_MESSAGE;
                            bitIndex[0] = 0;
                        }
                        else // not long enough, fill buffer again
                        {
                            currentState = READ;
                        }
                    }
                    else
                    {
                        bitIndex[1]++;
                        if (bitIndex[1] == FILTER_SIZE/2) // bit has been different for long enough, switch bit
                        {
                            oldBit = currentBit;
                            
                            bitIndex[0] = FILTER_SIZE/2;
                            bitIndex[1] = 0;
                        }
                        currentState = READ;
                    }
                    break;

                case READ:
                    // fill buffer
                    filterOutput = Filter(ADRESH);
                    if (filterOutput != -1)
                    {
                        currentState = FILTER;
                    }
                    break;
                    
                default:
                    break;
            }
        }
    }
}

// Filtering
int8_t Filter(uint8_t adcVal)
{
    static float hiVal = 0;
    static float loVal = 0;
    
    static uint8_t index = 0;

    hiVal += adcVal * filterHi[index];
    loVal += adcVal * filterLo[index];
    index++;
    
    if (index == BUFFER_SIZE)
    {
        if (hiVal < 0) hiVal *= -1;
        if (loVal < 0) loVal *= -1;
        index = 0;
        return hiVal > loVal;
    }
    return -1;
}

// Sampling ISR
void TMR3ISR(void)
{
    ADCON0bits.GO_NOT_DONE = 1;
    newSample = true;
    TMR3_WriteTimer(TUNE_SamplingRate); //tune if needed
}

// Deal with message
void MessageRoutine(void)
{
    // code for surface microcontroller
    if (true)
    {
        
        switch (receiveCode)
        {
            case 0:
                break;
                
            case 1:
                printf("Temperature: %d\r\n",messageIn);
                break;
                
            case 2:
                printf("Unit Status: %d\r\n",messageIn);
                break;
                
            default:
                printf("Code: %X Message: %X\r\n",receiveCode,messageIn);
                break;
        }
    }
    
    // code for downhole microcontroller
    if (false)
    {
        switch (receiveCode)
        {
            case 0:
                break;
                
            case 1: // set pins
                if (messageIn & 0x000F) ;// set pin 1
                if (messageIn & 0x00F0) ;// set pin 2
                if (messageIn & 0x0F00) ;// set pin 3
                break;
                
            case 2: // send temperature data
                
                break;
                
            default:
                break;
                
        }
    }
}
